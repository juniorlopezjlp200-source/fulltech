1. Sesi√≥n persistente (Postgres)

Usa express-session con store en Postgres (connect-pg-simple o similar).

Configura cookie sid con:

httpOnly: true

secure: true

sameSite: 'lax'

maxAge: 60-90 d√≠as

Middleware que cargue req.user desde la sesi√≥n.

Crea GET /api/me que devuelva:

{ 
  "authenticated": true, 
  "user": { "id": "...", "name": "...", "email": "...", "avatarUrl": "..." } 
}


Si no hay sesi√≥n ‚Üí { authenticated: false }.

2. UI modo cliente (cuando est√° logueado)

NavBar condicional:

Mostrar avatar y nombre corto.

Men√∫ con: Tablero, Perfil, Configuraci√≥n, Referir, Compartir, Soporte, Logout.

Men√∫ flotante m√≥vil con las mismas opciones.

Footer oculto en todas las rutas /mi/*.

En Cat√°logo, si autenticado, mostrar bot√≥n ‚ÄúIr a mi Tablero‚Äù.

3. Rutas del cliente

/mi/tablero: saludo + pedidos recientes + accesos r√°pidos.

/mi/perfil: editar datos y subir foto.

/mi/perfil/completar: wizard de 3 pasos (Datos ‚Üí Direcci√≥n ‚Üí Foto).

/mi/configuracion: seguridad, notificaciones, idioma.

/mi/referir: link o c√≥digo √∫nico + compartir.

/mi/soporte: acceso directo a WhatsApp o chat.

4. Perfil del cliente

Campos: nombre, tel√©fono, email, c√©dula, direcci√≥n completa (provincia, municipio, sector, calle, referencia), fecha nacimiento, g√©nero (opcional).

Subida de avatar:

POST /api/profile/avatar (multipart).

Guardar en storage ya configurado (usa secrets).

Devolver avatarUrl.

Actualizar datos:

PUT /api/profile con validaciones.

5. Base de datos (Postgres / Drizzle)

Mant√©n tablas existentes.

A√±ade si faltan:

user_profiles: avatar, c√©dula (encriptada), direcci√≥n, etc.

referrals: c√≥digo √∫nico + contador de usos.

sessions: para el store de sesi√≥n.

Haz migraciones limpias, sin tocar lo viejo.

6. QA obligatorio

Registro/login crea cookie y reconoce sesi√≥n en reingreso.

/api/me devuelve estado real de sesi√≥n.

Footer no aparece en /mi/*.

Men√∫ cliente funciona en desktop y m√≥vil.

Subida de avatar al storage actualizada y visible en el header.

Wizard de completar perfil activo en primer login.

7. Reglas generales

Usa DATABASE_URL, SESSION_SECRET y storage desde Secrets (no hardcodear nada).

Validar formatos (tel√©fono, email, c√©dula).

Limitar tama√±o de imagen a 2‚Äì5MB (JPG/PNG/WebP).

Proteger rutas privadas con middleware requireAuth.

üëâ Mensaje final para ejecutar en Replit:

‚ÄúImplementa sesi√≥n persistente en Postgres (DATABASE_URL + SESSION_SECRET). Crea GET /api/me. Ajusta UI modo cliente: Nav condicional con avatar, men√∫ flotante m√≥vil, footer oculto en /mi/*, rutas /mi/*. Habilita perfil con subida de avatar al storage configurado (desde Secrets). A√±ade migraciones para user_profiles y referrals. En Cat√°logo, si autenticado, muestra ‚ÄòIr a mi Tablero‚Äô.‚Äù